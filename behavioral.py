"""Behavioral model

Python implementation of state machine implemented in tachyon-batt-sense.ino.
"""
import matplotlib.pyplot as plt

# 3x single shots logged using DEBUG define, was being detected as 5
x1 = [922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 724,
      606, 638, 633, 663, 661, 691, 691, 708, 716, 731, 740, 748, 759, 766, 773,
      776, 781, 781, 784, 782, 783, 786, 786, 788, 786, 789, 789, 790, 790, 789,
      792, 789, 791, 789, 790, 789, 790, 789, 788, 787, 788, 786, 831, 890, 898,
      903, 906, 908, 910, 912, 913, 914, 915, 916, 916, 917, 917, 918, 918, 918,
      919, 919, 919, 919, 919, 919, 920, 920, 920, 920, 920, 920, 920, 920, 920,
      920, 920, 920, 920, 920, 921, 921, 920, 921, 921, 920, 920, 784, 603, 631,
      631, 651, 673, 674, 697, 703, 718, 725, 737, 748, 756, 763, 771, 775, 776,
      778, 779, 780, 781, 782, 784, 783, 786, 785, 789, 786, 789, 788, 789, 789,
      788, 790, 786, 788, 787, 788, 786, 785, 785, 785, 829, 888, 897, 902, 905,
      907, 909, 911, 912, 913, 914, 914, 915, 916, 916, 916, 917, 917, 917, 918,
      918, 918, 918, 918, 919, 918, 919, 919, 919, 919, 919, 919, 919, 919, 919,
      919, 919, 919, 919, 919, 919, 920, 920, 920, 919, 920, 920, 920, 919, 920,
      920, 919, 920, 920, 920, 920, 919, 920, 920, 920, 920, 920, 920, 920, 920,
      920, 920, 920, 920, 920, 810, 605, 622, 645, 645, 661, 680, 693, 701, 712,
      726, 733, 746, 755, 761, 768, 775, 776, 778, 780, 779, 782, 782, 784, 783,
      784, 785, 786, 787, 786, 788, 789, 786, 789, 787, 790, 786, 788, 785, 786,
      786, 784, 785, 811, 885, 895, 900, 904, 906, 908, 909, 911, 912, 913, 913,
      914, 915, 915, 916, 916, 916, 916, 917, 917, 917, 917, 917, 918, 917, 918,
      918, 918, 918, 918, 918, 918, 918, 918, 918, 918, 919, 919, 919, 919, 919,
      919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919,
      919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919,
      919, 919, 919, 919, 919, 919, 919, 919, 919, 919]

# 1x 3-shot burst
x2 = [924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924, 924,
      924, 924, 873, 641, 636, 634, 646, 668, 679, 685, 712, 713, 729, 736, 745,
      758, 764, 770, 774, 775, 779, 779, 780, 783, 784, 786, 786, 785, 789, 789,
      791, 789, 792, 790, 791, 792, 790, 792, 791, 791, 791, 791, 790, 789, 790,
      792, 795, 803, 806, 811, 817, 822, 825, 829, 831, 836, 837, 841, 841, 845,
      844, 844, 840, 838, 837, 835, 835, 831, 831, 830, 829, 826, 827, 823, 822,
      820, 818, 816, 815, 814, 811, 809, 808, 809, 811, 816, 820, 825, 828, 831,
      834, 837, 840, 842, 846, 849, 848, 851, 853, 846, 845, 841, 841, 840, 838,
      835, 834, 832, 831, 829, 827, 825, 824, 821, 819, 818, 817, 814, 812, 810,
      853, 897, 904, 908, 910, 912, 913, 914, 915, 916, 917, 917, 918, 918, 919,
      919, 920, 920, 920, 920, 920, 920, 921, 921, 921, 921, 921, 921, 921, 921,
      921, 921, 921, 921, 921, 921, 921, 921, 921, 921, 922, 922, 922, 922, 921,
      922, 921, 922, 922, 921, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922, 922,
      922, 922, 922, 922, 922, 922, 922, 922, 922, 922]

x = x1

lookback_rising = 16
lookback_falling = 22
det_rising_threshold = 24
det_falling_threshold = -21

DET_HL_THRESHOLD = -100
DET_TIMEOUT = 100

STATE_IDLE = 0
STATE_FILL_DELAYLINE = 1
STATE_DETECTING_RISING = 2
STATE_DETECTING_FALLING = 3

LARGEST_LOOKBACK = lookback_rising if lookback_rising > lookback_falling else lookback_falling

state = STATE_IDLE
state_d = STATE_IDLE
state_str = {STATE_IDLE: "idle", STATE_FILL_DELAYLINE: "fill",
             STATE_DETECTING_RISING: "detup", STATE_DETECTING_FALLING: "detdown"}

n_samples_in_state = 0

poi = []

for i in range(1, len(x)):

    if state != state_d:
        n_samples_in_state = 0
        print("{}: {} -> {}".format(i, state_str[state_d], state_str[state]))
    state_d = state
    n_samples_in_state += 1

    if state == STATE_IDLE:
        diff = x[i] - x[i-1]

        if diff < DET_HL_THRESHOLD:
            print "!",
            print("{}: initial det".format(i))
            poi.append(i)
            state = STATE_FILL_DELAYLINE

    elif state == STATE_FILL_DELAYLINE:
        if n_samples_in_state >= LARGEST_LOOKBACK:
            state = STATE_DETECTING_RISING

    elif state == STATE_DETECTING_RISING:
        if n_samples_in_state >= lookback_rising/2:
            now = x[i]
            then = x[i-lookback_rising]

            if (now - then) > det_rising_threshold:
                state = STATE_DETECTING_FALLING
                poi.append(i)
        if n_samples_in_state > DET_TIMEOUT:
            state = STATE_IDLE

    elif state == STATE_DETECTING_FALLING:
        if n_samples_in_state >= lookback_falling/2:
            now = x[i]
            then = x[i-lookback_falling]

            if (now - then) < det_falling_threshold:
                print "!",
                state = STATE_DETECTING_RISING
                poi.append(i)
        if n_samples_in_state > DET_TIMEOUT:
            state = STATE_IDLE
            poi.append(i)

plt.plot(x)
ylims = plt.gca().get_ylim()
for p in poi:
    plt.plot([p, p], ylims, c='k', linestyle="--", alpha=0.5)
plt.show()

